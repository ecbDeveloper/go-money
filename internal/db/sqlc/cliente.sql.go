// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cliente.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createClient = `-- name: CreateClient :one
INSERT INTO cliente	(
	categoria_cliente, 
	telefone,
	email,
	password
	) VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateClientParams struct {
	CategoriaCliente pgtype.Int4 `json:"categoria_cliente"`
	Telefone         string      `json:"telefone"`
	Email            string      `json:"email"`
	Password         []byte      `json:"password"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createClient,
		arg.CategoriaCliente,
		arg.Telefone,
		arg.Email,
		arg.Password,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getClientByEmail = `-- name: GetClientByEmail :one
SELECT id, categoria_cliente, password, telefone, email, data_cadastro FROM cliente
WHERE email = $1
`

func (q *Queries) GetClientByEmail(ctx context.Context, email string) (Cliente, error) {
	row := q.db.QueryRow(ctx, getClientByEmail, email)
	var i Cliente
	err := row.Scan(
		&i.ID,
		&i.CategoriaCliente,
		&i.Password,
		&i.Telefone,
		&i.Email,
		&i.DataCadastro,
	)
	return i, err
}
